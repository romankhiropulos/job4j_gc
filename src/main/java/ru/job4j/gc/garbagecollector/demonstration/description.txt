1.
    1) User user = new User(28, "Иван", countDeletedObj);
    2) У объекта класса User три поля: int age, String name и Count countDeletedObj.
        а) Заголовок объекта класса User занимает в памяти 16 байт для 64 битной JVM (12 бит необходимо для информации
        заголовка: MarkWord(HashCode, Garbage Collection Information, Lock), TypeInformationBlockPointer. Так же для
        кратности 8, размер расширяется до 16 байт. Это сделано для того, чтобы адрес в памяти всегда был кратным
        машинному слову).
        б) Примитив int, хранящий возраст пользователя, занимает 4 байта информации.
        в) Поле с именем пользователя(name) представляет собой объект класса String. Судя по деббагеру, данный объект
           состоит из четырех полей: массива value со значениями типа byte, поля coder типа byte, поля hash типа int
           и поля hashIsZero типа boolean.
           Заголовок объекта name занимает 16 байт памяти. Переменная с ссылкой на объект name
           занимает 4 байта для 32-битной и 64-битной платформы
           с размером кучи менее 32 Гб (-Xmx32G) и 8 байт для кучи свыше 32 Гб. Примем объем памяти
           для ссылки по максимальному значению - 8 байт.
           coder + hash + hashIsZero = 1 + 4 + 1 = 6 байт
           Поле value это объект массив, поэтому заголовок, помимо 12 байт, еще дополнительно занимает 4 байта для
           хранения значения длины массива. Примем объем памяти для ссылки по максимальному значению - 8 байт.
           Имя пользователя "Иван" состоит из четырех значений типа byte, лежащих в массиве value.
           Т.о. поле name занимает: 16 + 8 + 6 + 16 + 8 + 4 = 58 байт.
        г) Поле countDeletedObj состоит из заголовка объекта и поля int.
           Объем занимаемой памяти: 16 + 4 + 8(ссылка) = 28 байт
        Итого, объект user требует: 16(заголовок) + 8(ссылка) + 4(возраст) + 58(имя) + 28(счетчик) = 114 байт информации

2.
    Запуск метода main() в классе Main с ключами -Xmx2m -Xms4m
    Объекты класса User создаются в цикле и их ссылки никуда не записываются  в коде программы, т.о. каждый созданный
    объект класса User кандидат на удаление сборщиком мусора.
    Примерно после создания 1870 объектов запускается сборка мусора и удаление объектов User. Этом говорит о том, что
    после создания ~1870 объектов класса User переполняется young generation, и запускается minor GC.
    Второй раз очистка происходит при создании ~ 3600 объектов (предполагаю, что это второй запуска minor GC).
    В третий раз очистка происходит при ~6300 объектах, что позволяет предплоложить возникновение переполнения
    old generation и запуска major GC.
    Четвертый запуск очистки произошел на ~ 9150 объектах, затем программа завершилась.